package com.nhl.link.move.unit.cayenne.t.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.PropertyFactory;

/**
 * Class _Etl4t_jt was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Etl4t_jt extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "id";

    public static final DateProperty<LocalDate> C_DATE = PropertyFactory.createDate("cDate", LocalDate.class);
    public static final DateProperty<LocalTime> C_TIME = PropertyFactory.createDate("cTime", LocalTime.class);
    public static final DateProperty<LocalDateTime> C_TIMESTAMP = PropertyFactory.createDate("cTimestamp", LocalDateTime.class);

    protected LocalDate cDate;
    protected LocalTime cTime;
    protected LocalDateTime cTimestamp;


    public void setCDate(LocalDate cDate) {
        beforePropertyWrite("cDate", this.cDate, cDate);
        this.cDate = cDate;
    }

    public LocalDate getCDate() {
        beforePropertyRead("cDate");
        return this.cDate;
    }

    public void setCTime(LocalTime cTime) {
        beforePropertyWrite("cTime", this.cTime, cTime);
        this.cTime = cTime;
    }

    public LocalTime getCTime() {
        beforePropertyRead("cTime");
        return this.cTime;
    }

    public void setCTimestamp(LocalDateTime cTimestamp) {
        beforePropertyWrite("cTimestamp", this.cTimestamp, cTimestamp);
        this.cTimestamp = cTimestamp;
    }

    public LocalDateTime getCTimestamp() {
        beforePropertyRead("cTimestamp");
        return this.cTimestamp;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "cDate":
                return this.cDate;
            case "cTime":
                return this.cTime;
            case "cTimestamp":
                return this.cTimestamp;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "cDate":
                this.cDate = (LocalDate)val;
                break;
            case "cTime":
                this.cTime = (LocalTime)val;
                break;
            case "cTimestamp":
                this.cTimestamp = (LocalDateTime)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.cDate);
        out.writeObject(this.cTime);
        out.writeObject(this.cTimestamp);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.cDate = (LocalDate)in.readObject();
        this.cTime = (LocalTime)in.readObject();
        this.cTimestamp = (LocalDateTime)in.readObject();
    }

}
